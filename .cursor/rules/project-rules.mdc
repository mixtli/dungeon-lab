---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules for DungeonLab

## Project Overview

This is a virtual tabletop system for table top role playing games (ttprgs)

## AI Agent Description
You are an expert in TypeScript, Node.js, Express, Vite, Vue.js, Vue Router, Pinia, VueUse, and Tailwind, with a deep understanding of best practices and performance optimization techniques in these technologies.

## General Rules

1.  Begin every reply with "Will do Chief!"


## üìö Project Context & Understanding
 
1.  **Documentation First:**
    *   **Always** check for and thoroughly review relevant project documentation *before* starting any task. This includes:
        *   Product Requirements Documents (PRDs)
        *   `README.md` (Project overview, setup, patterns, technology stack)
        *   `docs/architecture.md` (System architecture, component relationships)
        *   `docs/technical.md` (Technical specifications, established patterns)

    *   If documentation is missing, unclear, or conflicts with the request, **ask for clarification**.
2.  **Memory Bank**
    * We use the memory-bank-mcp to track and understand overall project context.  The memory bank is stored in the memory-bank directory.
    * The memory bank is used to track the active context, product decisions, and high level progress.
    * For detailed task management, we use the task-master mcp.   


3.  **Architecture Adherence:**
    *   Understand and respect module boundaries, data flow, system interfaces, and component dependencies outlined in `docs/architecture.md`.
    *   Validate that changes comply with the established architecture. Warn and propose compliant solutions if a violation is detected.
4.  **Pattern & Tech Stack Awareness:**
    *   Reference `README.md` and `docs/technical.md` to understand and utilize existing patterns and technologies.
    *   Exhaust options using existing implementations before proposing new patterns or libraries.
 
## ‚öôÔ∏è Task Execution & Workflow
 
1.  **Task Definition:**
    *   Clearly understand the task requirements, acceptance criteria, and any dependencies from task master and the PRD.
2.  **Systematic Change Protocol:** Before making significant changes:
    *   Determine whether to use sequential thinking
    *   **Identify Impact:** Determine affected components, dependencies, and potential side effects.
    *   **Plan:** Outline the steps. Tackle one logical change or file at a time.
    *   **Verify Testing:** For now, we are manually testing.  Confirm with the user that the changes are working.

3.  **Progress Tracking:**
    * Use task master to track the progress of tasks.
    * Use the memory bank to track high level decisions and major milestones

## ‚ú® Code Quality & Style
 
1.  **TypeScript Guidelines:** 
    * Use strict typing (avoid `any`). 
    * All code should be in Typescript, NOT javascript.
    * We are using ESM syntax always, not CommonJS
    * Typescript files should be named with a ".mts" extension
    * "import" statements should reference the files as ".mjs".  Referencing an ".mts" file in an import statement is not valid and will break.
    * Document complex logic or public APIs with JSDoc.

2.  **Readability & Maintainability:** Write clean, well-organized code.
3.  **Avoid Duplication (DRY):** Actively look for and reuse existing functionality. Refactor to eliminate duplication.
4.  **Linting/Formatting:** Ensure all code conforms to project's ESLint/Prettier rules.
5.  **Pattern Consistency:** Adhere to established project patterns. Don't introduce new ones without discussion/explicit instruction. If replacing an old pattern, ensure the old implementation is fully removed.
6.  **File Naming:** Use clear, descriptive names. Avoid "temp", "refactored", "improved", etc., in permanent file names.
 
 ## üêõ Debugging & Troubleshooting
 
1.  **Fix the Root Cause:** Prioritize fixing the underlying issue causing an error, rather than just masking or handling it, unless a temporary workaround is explicitly agreed upon.
2.  **Console/Log Analysis:** Always check browser and server console output for errors, warnings, or relevant logs after making changes or when debugging. Report findings.
3.  **Targeted Logging:** For persistent or complex issues, add specific `console.log` statements (or use a project logger) to trace execution and variable states. *Remember to check the output.*
4.  **Check the `fixes/` Directory:** Before deep-diving into a complex or recurring bug, check `fixes/` for documented solutions to similar past issues.
5.  **Document Complex Fixes:** If a bug requires significant effort (multiple iterations, complex logic) to fix, create a concise `.md` file in the `fixes/` directory detailing the problem, investigation steps, and the solution. Name it descriptively (e.g., `fixes/resolve-race-condition-in-user-update.md`).
6.  **Research:** Use available tools (Firecrawl, documentation search, etc.) to research solutions or best practices when stuck or unsure.

## Documentation Maintenance

1.  **Update Docs:** If code changes impact architecture, technical decisions, established patterns, or task status, update the relevant documentation (`README.md`, `docs/architecture.md`, `docs/technical.md`).
2.  **Keep Rules Updated:** This file should be reviewed and updated periodically to reflect learned best practices and project evolution.

 
## üå≥ Version Control & Environment
1.  **Git Hygiene:**
    *   Commit frequently with clear, atomic messages.
    *   Keep the working directory clean; ensure no unrelated or temporary files are staged or committed.
    *   Use `.gitignore` effectively.
2.  **Branching Strategy:** Follow the project's established branching strategy. Do not create new branches unless requested or necessary for the workflow (e.g., feature branches).
5.  **Server Management:** Kill related running servers before starting new ones. Restart servers after relevant configuration or backend changes.

## Project layout

This project has three core packages:  server, web, and shared.  All live in the packages directory. 
* server - A nodejs express app written in typescript that implements REST and WebSocket APIs.  This should only contain server code that is common to all TTRPGs.
* web - The web client for this app, built using the Vue framework in typescript. 
* shared - code that is shared between client and server.   This can include types, utility functions and classes, and other shared code.

## Plugins

Any functionality that is specific to a TTRPG goes in a plugin.  Eventually we will support multiple types of plugins, but for now we are focusing on Game System Plugins that implement specific TTRPGs.  Any code specific to a TTRPG goes in a plugin.  Plugins each live in their own package in the packages/plugins directory.
Currently, we are only building one plugin for the D&D 5th edition 2024 rules in the packages/plugins/dnd-5e-2024 directory.

Each plugin mirrors the structure of the main application in that there may be a server plugin, client plugin, and shared directory for code shared between client and server.   So the directory structure looks like this:
packages/
  web/src
  server/src
  shared/src
    base/
      plugin.mts base class for plugins
      server.mts base class for plugin servers
      web.mts base class for web plugins
    types/ -shared types
  plugins/
    dnd-5e-2024/
       web/
         index.mts - web plugin entrypoint
       server/
         index.mts -server plugin entrypoint
       shared/

    In general, web and server code should not depend directly on plugin code, and plugins should not depend on client and server code except through interfaces.


    Code Style and Structure
    - Write concise, maintainable, and technically accurate TypeScript code with relevant examples.
    - Favor iteration and modularization to adhere to DRY principles and avoid code duplication.
    - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
    - Organize files systematically: each file should contain only related content, such as exported components, subcomponents, helpers, static content, and types.

    Authentication:
    - We always want to use session based authorization.  Auth checks should check req.session.user.

    WebSockets:
    - We ONLY want to use socket.io on both client and server.  We do not want to use ws or WebSocket in the client or any other websocket library.
  
    Naming Conventions
    - Use lowercase with dashes for directories (e.g., components/auth-wizard).
    - Favor named exports for functions.
  
    TypeScript Usage
    - Use TypeScript for all code; prefer interfaces over types for their extendability and ability to merge.
    - Avoid enums; use maps instead for better type safety and flexibility.
    - Use functional components with TypeScript interfaces.
  
    Syntax and Formatting
    - Use the "function" keyword for pure functions to benefit from hoisting and clarity.
    - Always use the Vue Composition API script setup style.
  
    UI and Styling
    - Use Tailwind for components and styling.
    - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  
    Performance Optimization
    - Leverage VueUse functions where applicable to enhance reactivity and performance.
    - Wrap asynchronous components in Suspense with a fallback UI.
    - Use dynamic loading for non-critical components.
    - Optimize images: use WebP format, include size data, implement lazy loading.
    - Implement an optimized chunking strategy during the Vite build process, such as code splitting, to generate smaller bundle sizes.

